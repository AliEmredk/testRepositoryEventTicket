Index: src/main/java/controllers/EventMainController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controllers;\r\n\r\nimport be.Event;\r\nimport bll.EventManagement;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.control.ListView;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\nimport java.util.Comparator;\r\n\r\npublic class EventMainController {\r\n\r\n    public Button btnEventCEdit;\r\n    @FXML\r\n    private ListView<String> eventsListView;\r\n    @FXML\r\n    private Button logoutButtonEC, getBtnEventCAdd, btnEventCSearch, btnNextPage,btnPrevPage;\r\n    @FXML\r\n    private TextField txtEventCSearch;\r\n    @FXML\r\n    private ComboBox<String> sortComboBox;\r\n    @FXML\r\n    private ComboBox<String> filterComboBox;\r\n    @FXML\r\n    private TextField filterValueField;\r\n    @FXML\r\n    private Button btnFilter;\r\n\r\n    private final EventManagement eventManagement = new EventManagement();\r\n    private ObservableList<String> allEvents = FXCollections.observableArrayList();\r\n    private ObservableList<String> filteredEvents = FXCollections.observableArrayList();\r\n\r\n    private static final int PAGE_SIZE = 10;\r\n    private int currentPage = 0;\r\n\r\n\r\n    @FXML\r\n    public void initialize() {\r\n        loadEvents();\r\n        logoutButtonEC.setOnAction(event -> logoutMainScreen());\r\n        btnEventCSearch.setOnAction(event -> searchEvents());\r\n        btnNextPage.setOnAction(event -> nextPage());\r\n        btnPrevPage.setOnAction(event -> previousPage());\r\n        sortComboBox.getItems().addAll(\r\n                \"Sort by Date\",\r\n                \"Sort by Price\",\r\n                \"Sort by Location\");\r\n        sortComboBox.setOnAction(event -> sortEvents());\r\n        filterComboBox.getItems().addAll(\r\n                \"Free Events\",\r\n                \"Paid Events\",\r\n                \"Today’s Events\",\r\n                \"By Location\",\r\n                \"By Price\"\r\n        );\r\n        btnFilter.setOnAction(event -> filterEvents());\r\n    }\r\n\r\n    public void loadEvents() {\r\n        List<Event> events = eventManagement.getAllEvents();\r\n        allEvents.setAll(events.stream().map(Event::getEventName).collect(Collectors.toList()));\r\n        searchEvents();\r\n    }\r\n\r\n    private void searchEvents() {\r\n        String query = txtEventCSearch.getText().trim().toLowerCase();\r\n        if (query.isEmpty()) {\r\n            filteredEvents.setAll(allEvents);\r\n        } else {\r\n            filteredEvents.setAll(allEvents.stream()\r\n                    .filter(event -> event.toLowerCase().contains(query))\r\n                    .collect(Collectors.toList()));\r\n        }\r\n        currentPage = 0;\r\n        updatePagination();\r\n    }\r\n\r\n    private void updatePagination() {\r\n        int fromIndex = currentPage * PAGE_SIZE;\r\n        int toIndex = Math.min(fromIndex + PAGE_SIZE, filteredEvents.size());\r\n\r\n        if (fromIndex >= filteredEvents.size()) {\r\n            currentPage = Math.max(0, currentPage - 1);\r\n            fromIndex = currentPage * PAGE_SIZE;\r\n            toIndex = Math.min(fromIndex + PAGE_SIZE, filteredEvents.size());\r\n        }\r\n\r\n        eventsListView.setItems(FXCollections.observableArrayList(filteredEvents.subList(fromIndex, toIndex)));\r\n        btnPrevPage.setDisable(currentPage == 0);\r\n        btnNextPage.setDisable(toIndex >= filteredEvents.size());\r\n    }\r\n\r\n    private void nextPage() {\r\n        if ((currentPage + 1) * PAGE_SIZE < filteredEvents.size()) {\r\n            currentPage++;\r\n            updatePagination();\r\n        }\r\n    }\r\n\r\n    private void previousPage() {\r\n        if (currentPage > 0) {\r\n            currentPage--;\r\n            updatePagination();\r\n        }\r\n    }\r\n\r\n    private void sortEvents() {\r\n        String selectedOption = sortComboBox.getValue();\r\n        List<Event> events = eventManagement.getAllEvents(); // Fetch events from database\r\n\r\n        if (selectedOption == null) return; // If no option selected, do nothing\r\n\r\n        switch (selectedOption) {\r\n            case \"Sort by Date\":\r\n                events.sort(Comparator.comparing(Event::getDate)); // Assuming date is stored as String\r\n                break;\r\n            case \"Sort by Price\":\r\n                events.sort(Comparator.comparingInt(Event::getPrice));\r\n                break;\r\n            case \"Sort by Location\":\r\n                events.sort(Comparator.comparing(Event::getLocation));\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n\r\n        // Update the ListView\r\n        List<String> eventNames = events.stream()\r\n                .map(Event::getEventName)\r\n                .collect(Collectors.toList());\r\n        ObservableList<String> observableList = FXCollections.observableArrayList(eventNames);\r\n        eventsListView.setItems(observableList);\r\n    }\r\n\r\n    private void filterEvents() {\r\n        String filterOption = filterComboBox.getValue();\r\n        String filterValue = filterValueField.getText().trim();\r\n\r\n        if (filterOption == null) return; // No filter selected\r\n\r\n        List<Event> events = eventManagement.getAllEvents(); // Load all events again\r\n\r\n        switch (filterOption) {\r\n            case \"Free Events\":\r\n                events = events.stream()\r\n                        .filter(event -> event.getPrice() == 0)\r\n                        .collect(Collectors.toList());\r\n                break;\r\n            case \"Paid Events\":\r\n                events = events.stream()\r\n                        .filter(event -> event.getPrice() > 0)\r\n                        .collect(Collectors.toList());\r\n                break;\r\n            case \"Today’s Events\":\r\n                events = events.stream()\r\n                        .filter(event -> event.getDate().equals(getTodayDate()))\r\n                        .collect(Collectors.toList());\r\n                break;\r\n            case \"By Location\":\r\n                if (!filterValue.isEmpty()) {\r\n                    events = events.stream()\r\n                            .filter(event -> event.getLocation().toLowerCase().contains(filterValue.toLowerCase()))\r\n                            .collect(Collectors.toList());\r\n                }\r\n                break;\r\n            case \"By Price\":\r\n                try {\r\n                    int priceFilter = Integer.parseInt(filterValue);\r\n                    events = events.stream()\r\n                            .filter(event -> event.getPrice() <= priceFilter)\r\n                            .collect(Collectors.toList());\r\n                } catch (NumberFormatException e) {\r\n                    System.out.println(\"Invalid price input\");\r\n                    return;\r\n                }\r\n                break;\r\n        }\r\n\r\n        // Update ListView\r\n        List<String> eventNames = events.stream()\r\n                .map(Event::getEventName)\r\n                .collect(Collectors.toList());\r\n        eventsListView.setItems(FXCollections.observableArrayList(eventNames));\r\n    }\r\n\r\n    // Helper method to get today's date in the correct format\r\n    private String getTodayDate() {\r\n        return java.time.LocalDate.now().toString(); // Adjust format if needed\r\n    }\r\n\r\n    private void logoutMainScreen() {\r\n        switchScene(\"LoginMain.fxml\", \"Login Screen\");\r\n    }\r\n\r\n    private void switchScene(String fxmlFile, String title) {\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/view/\" + fxmlFile));\r\n            Parent root = loader.load();\r\n            Stage stage = (Stage) logoutButtonEC.getScene().getWindow();\r\n            stage.setScene(new Scene(root));\r\n            stage.setTitle(title);\r\n            stage.show();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controllers/EventMainController.java b/src/main/java/controllers/EventMainController.java
--- a/src/main/java/controllers/EventMainController.java	(revision 593d969655fdee066786b858ea73cf49643f0cc4)
+++ b/src/main/java/controllers/EventMainController.java	(date 1743670973603)
@@ -1,218 +1,111 @@
 package controllers;
 
 import be.Event;
-import bll.EventManagement;
+import dal.EventDAO;
 import javafx.collections.FXCollections;
 import javafx.collections.ObservableList;
-import javafx.fxml.FXML;
-import javafx.fxml.FXMLLoader;
-import javafx.scene.Parent;
-import javafx.scene.Scene;
-import javafx.scene.control.Button;
-import javafx.scene.control.ComboBox;
-import javafx.scene.control.ListView;
-import javafx.scene.control.TextField;
-import javafx.stage.Stage;
 
-import java.io.IOException;
 import java.util.List;
 import java.util.stream.Collectors;
-import java.util.Comparator;
 
 public class EventMainController {
 
-    public Button btnEventCEdit;
-    @FXML
-    private ListView<String> eventsListView;
-    @FXML
-    private Button logoutButtonEC, getBtnEventCAdd, btnEventCSearch, btnNextPage,btnPrevPage;
-    @FXML
-    private TextField txtEventCSearch;
-    @FXML
-    private ComboBox<String> sortComboBox;
-    @FXML
-    private ComboBox<String> filterComboBox;
-    @FXML
-    private TextField filterValueField;
-    @FXML
-    private Button btnFilter;
-
-    private final EventManagement eventManagement = new EventManagement();
-    private ObservableList<String> allEvents = FXCollections.observableArrayList();
-    private ObservableList<String> filteredEvents = FXCollections.observableArrayList();
-
-    private static final int PAGE_SIZE = 10;
+    private EventDAO eventDAO = new EventDAO();
+    private ObservableList<Event> events = FXCollections.observableArrayList();
     private int currentPage = 0;
+    private final int itemsPerPage = 5;
 
-
-    @FXML
-    public void initialize() {
+    // Constructor to initialize events
+    public EventMainController() {
         loadEvents();
-        logoutButtonEC.setOnAction(event -> logoutMainScreen());
-        btnEventCSearch.setOnAction(event -> searchEvents());
-        btnNextPage.setOnAction(event -> nextPage());
-        btnPrevPage.setOnAction(event -> previousPage());
-        sortComboBox.getItems().addAll(
-                "Sort by Date",
-                "Sort by Price",
-                "Sort by Location");
-        sortComboBox.setOnAction(event -> sortEvents());
-        filterComboBox.getItems().addAll(
-                "Free Events",
-                "Paid Events",
-                "Today’s Events",
-                "By Location",
-                "By Price"
-        );
-        btnFilter.setOnAction(event -> filterEvents());
     }
 
+    // Load all events from the database
     public void loadEvents() {
-        List<Event> events = eventManagement.getAllEvents();
-        allEvents.setAll(events.stream().map(Event::getEventName).collect(Collectors.toList()));
-        searchEvents();
-    }
-
-    private void searchEvents() {
-        String query = txtEventCSearch.getText().trim().toLowerCase();
-        if (query.isEmpty()) {
-            filteredEvents.setAll(allEvents);
-        } else {
-            filteredEvents.setAll(allEvents.stream()
-                    .filter(event -> event.toLowerCase().contains(query))
-                    .collect(Collectors.toList()));
-        }
-        currentPage = 0;
-        updatePagination();
-    }
-
-    private void updatePagination() {
-        int fromIndex = currentPage * PAGE_SIZE;
-        int toIndex = Math.min(fromIndex + PAGE_SIZE, filteredEvents.size());
-
-        if (fromIndex >= filteredEvents.size()) {
-            currentPage = Math.max(0, currentPage - 1);
-            fromIndex = currentPage * PAGE_SIZE;
-            toIndex = Math.min(fromIndex + PAGE_SIZE, filteredEvents.size());
-        }
-
-        eventsListView.setItems(FXCollections.observableArrayList(filteredEvents.subList(fromIndex, toIndex)));
-        btnPrevPage.setDisable(currentPage == 0);
-        btnNextPage.setDisable(toIndex >= filteredEvents.size());
+        List<Event> allEvents = eventDAO.getAllEvents();
+        events.clear();
+        events.addAll(allEvents);
     }
 
-    private void nextPage() {
-        if ((currentPage + 1) * PAGE_SIZE < filteredEvents.size()) {
-            currentPage++;
-            updatePagination();
-        }
+    // Get the events displayed on the current page
+    public ObservableList<Event> getEventsForCurrentPage() {
+        int startIndex = currentPage * itemsPerPage;
+        int endIndex = Math.min(startIndex + itemsPerPage, events.size());
+        return FXCollections.observableArrayList(events.subList(startIndex, endIndex));
     }
 
-    private void previousPage() {
-        if (currentPage > 0) {
-            currentPage--;
-            updatePagination();
-        }
+    // Handle searching
+    public void searchEvents(String query) {
+        List<Event> filteredEvents = eventDAO.getAllEvents().stream()
+                .filter(event -> event.getEventName().toLowerCase().contains(query.toLowerCase()))
+                .collect(Collectors.toList());
+        events.clear();
+        events.addAll(filteredEvents);
     }
 
-    private void sortEvents() {
-        String selectedOption = sortComboBox.getValue();
-        List<Event> events = eventManagement.getAllEvents(); // Fetch events from database
-
-        if (selectedOption == null) return; // If no option selected, do nothing
-
-        switch (selectedOption) {
+    // Handle sorting
+    public void sortEvents(String criteria) {
+        switch (criteria) {
             case "Sort by Date":
-                events.sort(Comparator.comparing(Event::getDate)); // Assuming date is stored as String
+                events.sort((e1, e2) -> e1.getDate().compareTo(e2.getDate()));
                 break;
             case "Sort by Price":
-                events.sort(Comparator.comparingInt(Event::getPrice));
+                events.sort((e1, e2) -> Integer.compare(e1.getPrice(), e2.getPrice()));
                 break;
             case "Sort by Location":
-                events.sort(Comparator.comparing(Event::getLocation));
+                events.sort((e1, e2) -> e1.getLocation().compareTo(e2.getLocation()));
                 break;
-            default:
-                return;
         }
-
-        // Update the ListView
-        List<String> eventNames = events.stream()
-                .map(Event::getEventName)
-                .collect(Collectors.toList());
-        ObservableList<String> observableList = FXCollections.observableArrayList(eventNames);
-        eventsListView.setItems(observableList);
     }
 
-    private void filterEvents() {
-        String filterOption = filterComboBox.getValue();
-        String filterValue = filterValueField.getText().trim();
-
-        if (filterOption == null) return; // No filter selected
-
-        List<Event> events = eventManagement.getAllEvents(); // Load all events again
-
-        switch (filterOption) {
+    // Handle filtering
+    public void filterEvents(String filter) {
+        switch (filter) {
             case "Free Events":
-                events = events.stream()
-                        .filter(event -> event.getPrice() == 0)
-                        .collect(Collectors.toList());
+                events.setAll(events.filtered(event -> event.getPrice() == 0));
                 break;
             case "Paid Events":
-                events = events.stream()
-                        .filter(event -> event.getPrice() > 0)
-                        .collect(Collectors.toList());
+                events.setAll(events.filtered(event -> event.getPrice() > 0));
                 break;
             case "Today’s Events":
-                events = events.stream()
-                        .filter(event -> event.getDate().equals(getTodayDate()))
-                        .collect(Collectors.toList());
+                // Example filter for today's events
+                events.setAll(events.filtered(event -> event.getDate().equals("2025-04-03")));  // Replace with the actual logic
                 break;
             case "By Location":
-                if (!filterValue.isEmpty()) {
-                    events = events.stream()
-                            .filter(event -> event.getLocation().toLowerCase().contains(filterValue.toLowerCase()))
-                            .collect(Collectors.toList());
-                }
+                // Filter by location if needed
                 break;
             case "By Price":
-                try {
-                    int priceFilter = Integer.parseInt(filterValue);
-                    events = events.stream()
-                            .filter(event -> event.getPrice() <= priceFilter)
-                            .collect(Collectors.toList());
-                } catch (NumberFormatException e) {
-                    System.out.println("Invalid price input");
-                    return;
-                }
+                // Filter by price if needed
                 break;
         }
+    }
 
-        // Update ListView
-        List<String> eventNames = events.stream()
-                .map(Event::getEventName)
-                .collect(Collectors.toList());
-        eventsListView.setItems(FXCollections.observableArrayList(eventNames));
+    // Pagination: next page
+    public void nextPage() {
+        if ((currentPage + 1) * itemsPerPage < events.size()) {
+            currentPage++;
+        }
     }
 
-    // Helper method to get today's date in the correct format
-    private String getTodayDate() {
-        return java.time.LocalDate.now().toString(); // Adjust format if needed
+    // Pagination: previous page
+    public void previousPage() {
+        if (currentPage > 0) {
+            currentPage--;
+        }
     }
 
-    private void logoutMainScreen() {
-        switchScene("LoginMain.fxml", "Login Screen");
+    // Get filtered events
+    public ObservableList<Event> getFilteredEvents() {
+        return getEventsForCurrentPage();
     }
 
-    private void switchScene(String fxmlFile, String title) {
-        try {
-            FXMLLoader loader = new FXMLLoader(getClass().getResource("/view/" + fxmlFile));
-            Parent root = loader.load();
-            Stage stage = (Stage) logoutButtonEC.getScene().getWindow();
-            stage.setScene(new Scene(root));
-            stage.setTitle(title);
-            stage.show();
-        } catch (IOException e) {
-            throw new RuntimeException(e);
-        }
+    // Get the total number of pages
+    public int getTotalPages() {
+        return (int) Math.ceil((double) events.size() / itemsPerPage);
+    }
+
+    // Get all events for testing purposes
+    public ObservableList<Event> getAllEvents() {
+        return events;
     }
-}
+}
\ No newline at end of file
Index: src/main/java/controllers/BaseDashboard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controllers;\r\n\r\nimport bll.UserSession;\r\nimport dal.LoginDAO;\r\nimport dk.easv.EventsView;\r\nimport dk.easv.SettingsView;\r\nimport javafx.animation.FadeTransition;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.*;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\n\r\npublic abstract class BaseDashboard {\r\n\r\n    protected StackPane contentArea;\r\n    protected Pane userPane, eventsPane, settingsPane;\r\n    protected Button userBtn, eventsBtn, settingsBtn;\r\n\r\n    private LoginDAO loginDAO = new LoginDAO();\r\n\r\n    protected abstract void addCustomButtons(VBox sidebar, StackPane contentArea);\r\n\r\n    public void start(Stage primaryStage) {\r\n        BorderPane root = new BorderPane();\r\n\r\n        VBox sidebar = new VBox();\r\n        sidebar.setPadding(new Insets(20));\r\n        sidebar.setSpacing(15);\r\n        sidebar.setStyle(\"-fx-background-color: #464646;\");\r\n        sidebar.setPrefWidth(200);\r\n\r\n        Image logoImage = new Image(getClass().getResourceAsStream(\"/images/easvlogo.png\"));\r\n        ImageView logoView = new ImageView(logoImage);\r\n        logoView.setFitWidth(150);\r\n        logoView.setPreserveRatio(true);\r\n        logoView.setSmooth(true);\r\n        VBox.setMargin(logoView, new Insets(0, 0, 30, 0));\r\n\r\n        eventsBtn = createSidebarButton(\"\uD83D\uDCC5\", \"View Events\");\r\n        settingsBtn = createSidebarButton(\"\uD83D\uDD27\", \"Settings\");\r\n\r\n        contentArea = new StackPane();\r\n        contentArea.setPadding(new Insets(20));\r\n        contentArea.setStyle(\"-fx-background-color: white;\");\r\n\r\n        eventsPane = new EventsView(UserSession.getRole());\r\n        settingsPane = new SettingsView();\r\n\r\n        contentArea.getChildren().addAll(eventsPane, settingsPane);\r\n\r\n        eventsPane.setVisible(true);\r\n        settingsPane.setVisible(false);\r\n\r\n        eventsBtn.setOnAction(e -> {\r\n            switchPane(eventsPane);\r\n            setActiveButton(eventsBtn, eventsBtn, settingsBtn);\r\n        });\r\n\r\n        settingsBtn.setOnAction(e -> {\r\n            switchPane(settingsPane);\r\n            setActiveButton(settingsBtn, eventsBtn, settingsBtn);\r\n        });\r\n\r\n        Button signOutBtn = createSignOutButton();\r\n\r\n        Region spacer = new Region();\r\n        VBox.setVgrow(spacer, Priority.ALWAYS);\r\n\r\n        sidebar.getChildren().addAll(\r\n                logoView,\r\n                eventsBtn,\r\n                settingsBtn,\r\n                spacer,\r\n                signOutBtn\r\n        );\r\n\r\n        addCustomButtons(sidebar, contentArea);\r\n\r\n        root.setLeft(sidebar);\r\n        root.setCenter(contentArea);\r\n\r\n        Scene scene = new Scene(root, 950, 600);\r\n        primaryStage.setTitle(\"Dashboard\");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n\r\n        setActiveButton(eventsBtn, eventsBtn, settingsBtn);\r\n    }\r\n\r\n    protected Button createSidebarButton(String icon, String labelText) {\r\n        Button btn = new Button(icon + \"  \" + labelText);\r\n        btn.setPrefWidth(180);\r\n        btn.setAlignment(Pos.CENTER_LEFT);\r\n        btn.setFont(Font.font(\"Arial\", 14));\r\n        btn.setTextFill(Color.WHITE);\r\n        btn.setBackground(Background.EMPTY);\r\n\r\n        btn.setStyle(\"\"\"\r\n            -fx-background-color: transparent;\r\n            -fx-text-fill: white;\r\n            -fx-font-size: 14px;\r\n            -fx-padding: 10 20 10 20;\r\n            -fx-alignment: center-left;\r\n            -fx-background-radius: 10;\r\n            -fx-cursor: hand;\r\n        \"\"\");\r\n\r\n        btn.setOnMouseEntered(e -> {\r\n            btn.setScaleX(1.05);\r\n            btn.setScaleY(1.05);\r\n            if (!btn.getStyleClass().contains(\"active\")) {\r\n                btn.setStyle(\"\"\"\r\n                    -fx-background-color: rgba(255,255,255,0.1);\r\n                    -fx-text-fill: white;\r\n                    -fx-padding: 10 20 10 20;\r\n                    -fx-background-radius: 10;\r\n                    -fx-cursor: hand;\r\n                \"\"\");\r\n            }\r\n        });\r\n\r\n        btn.setOnMouseExited(e -> {\r\n            btn.setScaleX(1.0);\r\n            btn.setScaleY(1.0);\r\n            if (!btn.getStyleClass().contains(\"active\")) {\r\n                btn.setStyle(\"\"\"\r\n                    -fx-background-color: transparent;\r\n                    -fx-padding: 10 20 10 20;\r\n                    -fx-cursor: hand;\r\n                    -fx-background-radius: 0 30 30 0;\r\n                \"\"\");\r\n            }\r\n        });\r\n\r\n        return btn;\r\n    }\r\n\r\n    protected void setActiveButton(Button activeBtn, Button... allButtons) {\r\n        for (Button btn : allButtons) {\r\n            btn.getStyleClass().remove(\"active\");\r\n            btn.setTextFill(Color.WHITE);\r\n            btn.setStyle(\"\"\"\r\n                -fx-background-color: transparent;\r\n                -fx-padding: 10 20 10 20;\r\n                -fx-cursor: hand;\r\n                -fx-background-radius: 0 30 30 0;\r\n            \"\"\");\r\n        }\r\n\r\n        activeBtn.setTextFill(Color.web(\"#3A4B5C\"));\r\n        activeBtn.setStyle(\"\"\"\r\n            -fx-background-color: #F9A825;\r\n            -fx-text-fill: #2196F3;\r\n            -fx-padding: 10 20 10 20;\r\n            -fx-background-radius: 15;\r\n            -fx-font-weight: bold;\r\n            -fx-cursor: hand;\r\n        \"\"\");\r\n    }\r\n\r\n    protected void switchPane(Pane paneToShow) {\r\n        paneToShow.setOpacity(0);\r\n        paneToShow.setVisible(true);\r\n\r\n        FadeTransition fadeTransition = new FadeTransition(Duration.millis(300), paneToShow);\r\n        fadeTransition.setFromValue(0.0);\r\n        fadeTransition.setToValue(1.0);\r\n        fadeTransition.play();\r\n\r\n        contentArea.getChildren().stream()\r\n                .filter(p -> p != paneToShow)\r\n                .forEach(p -> p.setVisible(false));\r\n    }\r\n\r\n    protected Pane createContentPane(String content) {\r\n        Label lbl = new Label(content);\r\n        lbl.setFont(new Font(20));\r\n        StackPane pane = new StackPane(lbl);\r\n        pane.setAlignment(Pos.CENTER);\r\n        pane.setStyle(\"-fx-background-color: white;\");\r\n        return pane;\r\n    }\r\n\r\n    private Button createSignOutButton() {\r\n        Button signOutBtn = new Button(\"\uD83D\uDEAA Sign Out\");\r\n        signOutBtn.setPrefWidth(180);\r\n        signOutBtn.setAlignment(Pos.CENTER_LEFT);\r\n        signOutBtn.setFont(Font.font(\"Arial\", 14));\r\n        signOutBtn.setTextFill(Color.WHITE);\r\n        signOutBtn.setBackground(Background.EMPTY);\r\n\r\n        signOutBtn.setStyle(\"\"\"\r\n            -fx-background-color: transparent;\r\n            -fx-padding: 10 20 10 20;\r\n            -fx-cursor: hand;\r\n            -fx-background-radius: 10;\r\n            -fx-text-fill: white;\r\n        \"\"\");\r\n\r\n        signOutBtn.setOnMouseEntered(e -> signOutBtn.setStyle(\"\"\"\r\n            -fx-background-color: rgba(255,255,255,0.1);\r\n            -fx-padding: 10 20 10 20;\r\n            -fx-cursor: hand;\r\n            -fx-background-radius: 10;\r\n            -fx-text-fill: white;\r\n        \"\"\"));\r\n\r\n        signOutBtn.setOnMouseExited(e -> signOutBtn.setStyle(\"\"\"\r\n            -fx-background-color: transparent;\r\n            -fx-padding: 10 20 10 20;\r\n            -fx-cursor: hand;\r\n            -fx-background-radius: 10;\r\n            -fx-text-fill: white;\r\n        \"\"\"));\r\n\r\n        signOutBtn.setOnAction(e -> {\r\n            try {\r\n                UserSession.clearSession();\r\n\r\n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/view/LoginMain.fxml\"));\r\n                Parent loginRoot = loader.load();\r\n\r\n                Scene loginScene = new Scene(loginRoot, 700, 500);\r\n\r\n                URL cssUrl = getClass().getResource(\"/view/loginstyle\");\r\n                if (cssUrl != null) {\r\n                    loginScene.getStylesheets().add(cssUrl.toExternalForm());\r\n                }\r\n\r\n                Stage loginStage = new Stage();\r\n                loginStage.setTitle(\"Glassmorphic Login UI\");\r\n                loginStage.setScene(loginScene);\r\n                loginStage.show();\r\n\r\n                Stage currentStage = (Stage) signOutBtn.getScene().getWindow();\r\n                currentStage.close();\r\n\r\n            } catch (IOException ex) {\r\n                ex.printStackTrace();\r\n            }\r\n        });\r\n\r\n        return signOutBtn;\r\n    }\r\n}
===================================================================
diff --git a/src/main/java/controllers/BaseDashboard.java b/src/main/java/controllers/BaseDashboard.java
--- a/src/main/java/controllers/BaseDashboard.java	(revision 593d969655fdee066786b858ea73cf49643f0cc4)
+++ b/src/main/java/controllers/BaseDashboard.java	(date 1743671543596)
@@ -56,7 +56,8 @@
         contentArea.setPadding(new Insets(20));
         contentArea.setStyle("-fx-background-color: white;");
 
-        eventsPane = new EventsView(UserSession.getRole());
+        EventMainController eventMainController = new EventMainController();
+        eventsPane = new EventsView(UserSession.getRole(), eventMainController);
         settingsPane = new SettingsView();
 
         contentArea.getChildren().addAll(eventsPane, settingsPane);
Index: src/main/java/dk/easv/EventsView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dk.easv;\r\n\r\nimport be.Event;\r\nimport be.User;\r\nimport dal.EventDAO;\r\nimport dal.UserDAO;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.layout.TilePane;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.stage.Modality;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class EventsView extends StackPane {\r\n\r\n    private String role;\r\n    private TilePane eventContainer;\r\n    private EventDAO eventDAO = new EventDAO();\r\n    private Event selectedEvent;\r\n    private List<Event> masterEventList = new ArrayList<>();\r\n\r\n    public EventsView(String role) {\r\n        this.role = role;\r\n\r\n        VBox eventsPane = new VBox(10);\r\n        eventsPane.setPadding(new Insets(15));\r\n        eventsPane.setStyle(\"-fx-background-color: white;\");\r\n\r\n        HBox topBar = new HBox(10);\r\n        topBar.setAlignment(Pos.CENTER_LEFT);\r\n\r\n        Button addEventBtn = new Button(\"Add Event\");\r\n        addEventBtn.setOnAction(e -> openAddEventWindow());\r\n\r\n        Button deleteEventBtn = new Button(\"Delete Event\");\r\n        deleteEventBtn.setOnAction(e -> openDeleteEventWindow());\r\n\r\n        TextField searchField = new TextField();\r\n        searchField.setPromptText(\"Search events...\");\r\n        Button searchBtn = new Button(\"\\uD83D\\uDD0E\"); //Magnifying Glass Emoji/Icon\r\n\r\n        if(this.role.equals(\"Admin\")) {\r\n            addEventBtn.setVisible(false);\r\n            addEventBtn.setManaged(false);\r\n        }\r\n\r\n        topBar.getChildren().addAll(addEventBtn, deleteEventBtn, searchField, searchBtn);\r\n\r\n        eventContainer = new TilePane();\r\n        eventContainer.setHgap(10);\r\n        eventContainer.setVgap(10);\r\n        eventContainer.setPrefColumns(3);\r\n        eventContainer.setPadding(new Insets(10));\r\n\r\n        //EventDAO eventDAO = new EventDAO();\r\n        //for (Event event : eventDAO.getAllEvents()) {\r\n        //    VBox eventCard = createEventCard(event);\r\n        //    eventContainer.getChildren().add(eventCard);\r\n        //}\r\n\r\n        refreshEventList();\r\n\r\n        ScrollPane scrollPane = new ScrollPane(eventContainer);\r\n        scrollPane.setFitToWidth(true);\r\n        scrollPane.setPrefHeight(600);\r\n        scrollPane.setStyle(\"-fx-background: white;\");\r\n\r\n        eventsPane.getChildren().addAll(topBar, scrollPane);\r\n\r\n        this.getChildren().add(eventsPane);\r\n    }\r\n\r\n    private VBox createEventCard(Event event) {\r\n        System.out.println(\"Creating tile for event: \" + event.getEventName()); // Debugging line\r\n\r\n        VBox card = new VBox();\r\n        card.setPadding(new Insets(10));\r\n        card.setSpacing(5);\r\n        card.setAlignment(Pos.CENTER);\r\n        card.setStyle(\"\"\"\r\n                -fx-background-color: #FFECB3;\r\n                -fx-border-radius: 10;\r\n                -fx-background-radius: 10;\r\n                -fx-padding: 10;\r\n                fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.2), 5, 0, 0, 3);\r\n                \"\"\");\r\n\r\n        Label nameLabel = new Label(event.getEventName());\r\n        nameLabel.setFont(new Font(16));\r\n\r\n        Label locationLabel = new Label(event.getLocation());\r\n        locationLabel.setFont(new Font(12));\r\n        locationLabel.setTextFill(Color.DARKGRAY);\r\n\r\n        Label dateLabel = new Label(event.getDate());\r\n        dateLabel.setFont(new Font(12));\r\n        dateLabel.setTextFill(Color.DARKGRAY);\r\n\r\n        Button editBtn = new Button(\"Edit\");\r\n\r\n        if(this.role.equals(\"Admin\")) {\r\n            editBtn.setVisible(false);\r\n            editBtn.setManaged(false);\r\n        }\r\n\r\n        card.getChildren().addAll(nameLabel, locationLabel, dateLabel);\r\n        card.setOnMouseClicked(e -> setSelectedEvent(event, card));\r\n\r\n        return card; // ✅ Return the VBox without adding it to eventContainer\r\n    }\r\n\r\n    private void refreshEventList() {\r\n        eventContainer.getChildren().clear();\r\n        // Load events from the database\r\n        masterEventList = eventDAO.getAllEvents();  // Get data from DB\r\n        System.out.println(\"Refreshing events: \" + masterEventList.size()); // Debugging line\r\n        for (Event event : masterEventList) {\r\n            System.out.println(\"Loaded Event: \" + event.getEventName()); // Debugging line\r\n            //VBox eventCard = createEventCard(event);\r\n            eventContainer.getChildren().add(createEventCard(event));\r\n        }\r\n    }\r\n\r\n    private void openAddEventWindow() {\r\n        Stage addEventsStage = new Stage();\r\n        addEventsStage.initModality(Modality.APPLICATION_MODAL);\r\n        addEventsStage.setTitle(\"Add Event\");\r\n\r\n        VBox vbox = new VBox(10);\r\n        vbox.setPadding(new Insets(15));\r\n        vbox.setAlignment(Pos.CENTER_LEFT);\r\n\r\n        TextField nameField = new TextField();\r\n        nameField.setPromptText(\"Event Name\");\r\n\r\n        TextField locationField = new TextField();\r\n        locationField.setPromptText(\"Event Location\");\r\n\r\n        DatePicker datePicker = new DatePicker();\r\n\r\n        TextField startTimeField = new TextField();\r\n        startTimeField.setPromptText(\"Start Time\");\r\n\r\n        TextField endTimeField = new TextField();\r\n        endTimeField.setPromptText(\"End Time\");\r\n\r\n        TextArea noteField = new TextArea();\r\n        noteField.setPromptText(\"Notes\");\r\n\r\n        TextField priceField = new TextField();\r\n        priceField.setPromptText(\"Price\");\r\n\r\n        TextField locationGuidanceField = new TextField();\r\n        locationGuidanceField.setPromptText(\"Location Guidance\");\r\n\r\n        UserDAO userDAO = new UserDAO();\r\n        List<User> coordinators = userDAO.getAllEventCoordinators();\r\n        ListView<User> coordinatorListView = new ListView<>();\r\n        ObservableList<User> coordinatorObservableList = FXCollections.observableArrayList(coordinators);\r\n        coordinatorListView.setItems(coordinatorObservableList);\r\n\r\n        Button saveBtn = new Button(\"Save\");\r\n        saveBtn.setOnAction(event -> {\r\n            if(nameField.getText().isEmpty() || locationField.getText().isEmpty()) {\r\n                Alert alert = new Alert(Alert.AlertType.WARNING, \"Please fill in all fields\", ButtonType.OK);\r\n                alert.showAndWait();\r\n                return;\r\n            }\r\n\r\n            int price = 0;\r\n            try {\r\n                price = Integer.parseInt(priceField.getText());\r\n            } catch (NumberFormatException ex) {\r\n                Alert alert = new Alert(Alert.AlertType.ERROR, \"Invalid price format!\", ButtonType.OK);\r\n                alert.showAndWait();\r\n                return;\r\n            }\r\n            Event newEvent = new Event(locationField.getText(), datePicker.getValue().toString(), startTimeField.getText(),\r\n                    endTimeField.getText(), noteField.getText(), price, locationGuidanceField.getText(), nameField.getText(), 0);\r\n\r\n            eventDAO.createEvent(newEvent);\r\n            refreshEventList();\r\n\r\n            for(User selectedUser : coordinatorListView.getSelectionModel().getSelectedItems()) {\r\n                eventDAO.assignCoordinatorToEvent(newEvent.getEventId(), selectedUser.getUser_Id());\r\n            }\r\n            addEventsStage.close();\r\n        });\r\n\r\n        vbox.getChildren().addAll(nameField, locationField, datePicker, startTimeField, endTimeField, noteField, priceField, new Label(\"Assign Coordinators:\"), coordinatorListView, saveBtn);\r\n\r\n        Scene scene = new Scene(vbox, 400, 500);\r\n        addEventsStage.setScene(scene);\r\n        addEventsStage.show();\r\n    }\r\n\r\n    private void setSelectedEvent(Event event, VBox eventCard) {\r\n        this.selectedEvent = event;\r\n        for (var node : eventContainer.getChildren()) {\r\n            node.setStyle(\"-fx-background-color: #FFECB3; -fx-border-radius: 10; -fx-background-radius: 10;\");\r\n        }\r\n        eventCard.setStyle(\"-fx-background-color: #FFD54F; -fx-border-radius: 10; -fx-background-radius: 10;\");\r\n    }\r\n\r\n    private void openDeleteEventWindow() {\r\n        if(selectedEvent == null) {\r\n            Alert alert = new Alert(Alert.AlertType.WARNING, \"Please select an event to delete!\", ButtonType.OK);\r\n            alert.showAndWait();\r\n            return;\r\n        }\r\n\r\n        Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION);\r\n        confirmAlert.setTitle(\"Confirm Delete\");\r\n        confirmAlert.setHeaderText(\"Are you sure you want to delete this event?\");\r\n        confirmAlert.setContentText(\"Event: \" + selectedEvent.getEventName() + \" will be deleted.\");\r\n\r\n        confirmAlert.showAndWait().ifPresent(response -> {\r\n            if(response == ButtonType.OK) {\r\n                EventDAO eventDAO = new EventDAO();\r\n                eventDAO.deleteEvent(selectedEvent.getEventName());\r\n                refreshEventList();\r\n            }\r\n        });\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/dk/easv/EventsView.java b/src/main/java/dk/easv/EventsView.java
--- a/src/main/java/dk/easv/EventsView.java	(revision 593d969655fdee066786b858ea73cf49643f0cc4)
+++ b/src/main/java/dk/easv/EventsView.java	(date 1743672406098)
@@ -4,6 +4,7 @@
 import be.User;
 import dal.EventDAO;
 import dal.UserDAO;
+import controllers.EventMainController;
 import javafx.collections.FXCollections;
 import javafx.collections.ObservableList;
 import javafx.geometry.Insets;
@@ -29,9 +30,14 @@
     private EventDAO eventDAO = new EventDAO();
     private Event selectedEvent;
     private List<Event> masterEventList = new ArrayList<>();
+    private EventMainController eventMainController;
 
-    public EventsView(String role) {
+    public EventsView(String role, EventMainController eventMainController) {
+        VBox vbox = new VBox();
+        vbox.getChildren().clear();
         this.role = role;
+        this.eventMainController = eventMainController;
+
 
         VBox eventsPane = new VBox(10);
         eventsPane.setPadding(new Insets(15));
@@ -57,18 +63,48 @@
 
         topBar.getChildren().addAll(addEventBtn, deleteEventBtn, searchField, searchBtn);
 
+        searchBtn.setOnAction(e -> {
+            String searchQuery = searchField.getText();
+            eventMainController.searchEvents(searchQuery);  // Delegate to the controller
+            refreshEventList();  // Refresh the list to display the filtered events
+        });
+
+        // Handle Sorting
+        ComboBox<String> sortComboBox = new ComboBox<>();
+        sortComboBox.getItems().addAll("Sort by Date", "Sort by Price", "Sort by Location");
+        sortComboBox.setOnAction(e -> {
+            String sortCriteria = sortComboBox.getValue();
+            eventMainController.sortEvents(sortCriteria);  // Delegate sort action to the controller
+            refreshEventList();  // Refresh list after sorting
+        });
+
+        // Handle Filtering
+        ComboBox<String> filterComboBox = new ComboBox<>();
+        filterComboBox.getItems().addAll("Free Events", "Paid Events", "Today’s Events", "By Location", "By Price");
+        filterComboBox.setOnAction(e -> {
+            String filter = filterComboBox.getValue();
+            eventMainController.filterEvents(filter);  // Delegate filter action to the controller
+            refreshEventList();  // Refresh list after filtering
+        });
+
+        // Pagination controls
+        Button btnNextPage = new Button("Next");
+        Button btnPrevPage = new Button("Previous");
+        btnNextPage.setOnAction(e -> {
+            eventMainController.nextPage();
+            refreshEventList();
+        });
+        btnPrevPage.setOnAction(e -> {
+            eventMainController.previousPage();
+            refreshEventList();
+        });
+
         eventContainer = new TilePane();
         eventContainer.setHgap(10);
         eventContainer.setVgap(10);
         eventContainer.setPrefColumns(3);
         eventContainer.setPadding(new Insets(10));
 
-        //EventDAO eventDAO = new EventDAO();
-        //for (Event event : eventDAO.getAllEvents()) {
-        //    VBox eventCard = createEventCard(event);
-        //    eventContainer.getChildren().add(eventCard);
-        //}
-
         refreshEventList();
 
         ScrollPane scrollPane = new ScrollPane(eventContainer);
@@ -76,7 +112,7 @@
         scrollPane.setPrefHeight(600);
         scrollPane.setStyle("-fx-background: white;");
 
-        eventsPane.getChildren().addAll(topBar, scrollPane);
+        eventsPane.getChildren().addAll(topBar, sortComboBox, filterComboBox, searchField, searchBtn, scrollPane, btnNextPage, btnPrevPage, btnNextPage);
 
         this.getChildren().add(eventsPane);
     }
@@ -122,14 +158,16 @@
 
     private void refreshEventList() {
         eventContainer.getChildren().clear();
-        // Load events from the database
-        masterEventList = eventDAO.getAllEvents();  // Get data from DB
-        System.out.println("Refreshing events: " + masterEventList.size()); // Debugging line
-        for (Event event : masterEventList) {
-            System.out.println("Loaded Event: " + event.getEventName()); // Debugging line
-            //VBox eventCard = createEventCard(event);
+        List<Event> filteredEvents = eventMainController.getFilteredEvents();  // Get the filtered list from the controller
+        for (Event event : filteredEvents) {
             eventContainer.getChildren().add(createEventCard(event));
         }
+        //masterEventList = eventDAO.getAllEvents();  // Get data from DB
+        //System.out.println("Refreshing events: " + masterEventList.size()); // Debugging line
+        //for (Event event : masterEventList) {
+        //    System.out.println("Loaded Event: " + event.getEventName()); // Debugging line
+        //VBox eventCard = createEventCard(event);
+        //    eventContainer.getChildren().add(createEventCard(event));
     }
 
     private void openAddEventWindow() {
