Index: src/main/java/dal/EventDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dal;\r\n\r\nimport be.Event;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class EventDAO {\r\n\r\n    private final DBAccess dbAccess = new DBAccess();\r\n\r\n    public void createEvent(Event event) {\r\n        String sql = \"INSERT INTO Event (Location, Date, StartTime, EndTime, Note, Price, Location_Guidance, EventName) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\";\r\n\r\n        try (Connection conn = dbAccess.DBConnection();\r\n            PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {\r\n\r\n            stmt.setString(1, event.getLocation());\r\n            stmt.setString(2, event.getDate());\r\n            stmt.setString(3, event.getStartTime());\r\n            stmt.setString(4, event.getEndTime());\r\n            stmt.setString(5,event.getNote());\r\n            stmt.setInt(6,event.getPrice());\r\n            stmt.setString(7,event.getLocation_Guidance());\r\n            stmt.setString(8,event.getEventName());\r\n\r\n            stmt.executeUpdate();\r\n            System.out.println(\"Event added successfully\");\r\n\r\n            try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {\r\n                if (generatedKeys.next()) {\r\n                    int generatedId = generatedKeys.getInt(1);\r\n                    event.setEventId(generatedId);  // Set the ID in the object\r\n                    System.out.println(\"Generated EventId: \" + generatedId);\r\n                }\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void updateEvent(int eventId, Event updatedEvent) {\r\n        String sql = \"UPDATE Event SET Location = ?, Date = ?, StartTime = ?, EndTime = ?, Note = ?, Price = ?, Location_Guidance = ?, EventName = ? WHERE EventId = ?\";\r\n\r\n        try (Connection conn = dbAccess.DBConnection();\r\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setString(1, updatedEvent.getLocation());\r\n            stmt.setString(2, updatedEvent.getDate());\r\n            stmt.setString(3, updatedEvent.getStartTime());\r\n            stmt.setString(4, updatedEvent.getEndTime());\r\n            stmt.setString(5, updatedEvent.getNote());\r\n            stmt.setInt(6, updatedEvent.getPrice());\r\n            stmt.setString(7, updatedEvent.getLocation_Guidance());\r\n            stmt.setString(8, updatedEvent.getEventName());\r\n            stmt.setInt(9, eventId);\r\n\r\n            int rowsAffected = stmt.executeUpdate();\r\n\r\n            if (rowsAffected > 0) {\r\n                logChange(\"Event\", \"UPDATE\", eventId, null);\r\n                System.out.println(\"Event updated successfully\");\r\n            } else {\r\n                System.out.println(\"No event found with ID: \" + eventId);\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void updateEvent(Event event) {\r\n\r\n        String sql = \"UPDATE Event SET Location = ?, Date = ?, StartTime = ?, EndTime = ?, Note = ?, Price = ?, Location_Guidance = ?, EventName = ? WHERE EventId = ?\";\r\n\r\n        try(Connection conn = dbAccess.DBConnection();\r\n            PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setString(1, event.getLocation());\r\n            stmt.setString(2, event.getDate());\r\n            stmt.setString(3, event.getStartTime());\r\n            stmt.setString(4, event.getEndTime());\r\n            stmt.setString(5, event.getNote());\r\n            stmt.setInt(6, event.getPrice());\r\n            stmt.setString(7, event.getLocation_Guidance());\r\n            stmt.setString(8, event.getEventName());\r\n            stmt.setInt(9, event.getEventId());\r\n\r\n            int rowsAffected = stmt.executeUpdate();\r\n            if(rowsAffected > 0) {\r\n                logChange(\"Event\", \"UPDATE\", event.getEventId(),null);\r\n                System.out.println(\"Event updated successfully\");\r\n            } else {\r\n                System.out.println(\"No event found\");\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void deleteEvent(String eventName){\r\n\r\n        String sql = \"DELETE FROM Event WHERE EventName = ?\";\r\n\r\n        try(Connection conn = dbAccess.DBConnection();\r\n            PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setString(1,eventName);\r\n            int rowsAffected = stmt.executeUpdate();\r\n\r\n\r\n            if (rowsAffected > 0) {\r\n                logChange(\"Event\", \"DELETE\",null, null);\r\n                System.out.println(\"Event deleted successfully :)\");\r\n            } else {\r\n                System.out.println(\"No event found with that name.\");\r\n            }\r\n        }   catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public List<Event> getAllEvents() {\r\n        List<Event> eventList = new ArrayList<>();\r\n        String sql = \"SELECT * FROM Event\";\r\n\r\n        try (Connection conn = dbAccess.DBConnection();\r\n            PreparedStatement stmt = conn.prepareStatement(sql);\r\n            ResultSet rs = stmt.executeQuery()) {\r\n            while (rs.next()) {\r\n                Event event = new Event(\r\n                    rs.getString(\"Location\"),\r\n                    rs.getString(\"Date\"),\r\n                    rs.getString(\"StartTime\"),\r\n                    rs.getString(\"EndTime\"),\r\n                    rs.getString(\"Note\"),\r\n                    rs.getInt(\"Price\"),\r\n                    rs.getString(\"Location_Guidance\"),\r\n                    rs.getString(\"EventName\"),\r\n                    rs.getInt(\"EventId\")\r\n                );\r\n                eventList.add(event);\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return eventList;\r\n    }\r\n\r\n    public void assignCoordinatorToEvent(int eventId, int userId) {\r\n        // to check EventId and UserId before assigning\r\n        if (!eventExists(eventId)) {\r\n            System.out.println(\"Error: EventId \" + eventId + \" does not exist\");\r\n            return;\r\n        }\r\n\r\n        if (!userExists(userId)) {\r\n            System.out.println(\"Error: UserId \" + userId + \" does not exist\");\r\n            return;\r\n        }\r\n\r\n        if (isCoordinatorAssigned(eventId, userId)) {\r\n            System.out.println(\"Warning: UserId \" + userId + \" is already assigned to EventId \" + eventId);\r\n            return;\r\n        }\r\n\r\n        String sql = \"INSERT INTO EventUser (EventId, UserId) VALUES (?, ?)\";\r\n\r\n        try (Connection conn = dbAccess.DBConnection();\r\n            PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setInt(1, eventId);\r\n            stmt.setInt(2, userId);\r\n            stmt.executeUpdate();\r\n\r\n            logChange(\"EventUser\", \"INSERT\", eventId, userId);\r\n            System.out.println(\"Assigned coordinator to event successfully\");\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void removeCoordinatorFromEvent(int eventId, int userId) {\r\n        // check if the coordinator is assigned\r\n        if (!isCoordinatorAssigned(eventId, userId)) {\r\n            System.out.println(\"Warning: UserId \" + userId + \" is not assigned to EventId \" + eventId);\r\n            return;\r\n        }\r\n\r\n        String sql = \"DELETE FROM EventUser WHERE EventId = ? AND UserId = ?\";\r\n\r\n        try (Connection conn = dbAccess.DBConnection();\r\n            PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setInt(1, eventId);\r\n            stmt.setInt(2, userId);\r\n            int rowsAffected = stmt.executeUpdate();\r\n\r\n            if (rowsAffected > 0) {\r\n                logChange(\"EventUser\", \"DELETE\", eventId, userId);\r\n                System.out.println(\"Successfully removed UserId \" + userId + \" from EventId \" + eventId);\r\n            } else {\r\n                System.out.println(\"Failed to remove UserId \" + userId + \" from EventId \" + eventId);\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    //These three methods belong to assignCoordinatorToEvent\r\n    // DON'T TOUCH THESE -_- I'll get mad!!!!\r\n    //------------------------------------------------------------------------------------------\r\n    private boolean eventExists(int eventId) {\r\n        String sql = \"SELECT 1 FROM Event WHERE EventId = ?\";\r\n\r\n        try (Connection conn = dbAccess.DBConnection();\r\n            PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setInt(1, eventId);\r\n            return stmt.executeQuery().next(); //If the rows exits, returns true\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private boolean userExists(int userId) {\r\n        String sql = \"SELECT 1 FROM LoginInfo WHERE UserId = ?\";\r\n\r\n        try (Connection conn = dbAccess.DBConnection();\r\n            PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setInt(1, userId);\r\n            return stmt.executeQuery().next(); //returns if the row exists\r\n\r\n        } catch(SQLException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private boolean isCoordinatorAssigned(int eventId, int userId) {\r\n        String sql = \"SELECT 1 FROM EventUser WHERE EventId = ? AND UserId = ?\";\r\n\r\n        try (Connection conn = dbAccess.DBConnection();\r\n            PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setInt(1,eventId);\r\n            stmt.setInt(2,userId);\r\n            return stmt.executeQuery().next();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n    //--------------------------------------------------------------------------------------------------------\r\n    // DON'T TOUCH THESE -_-\r\n\r\n\r\n    //This method created to follow change on events. This is for ChangeLog table on the database\r\n    //Please don't touch this :)\r\n    private void logChange(String tableName, String actionType, Integer eventId, Integer userId) {\r\n        String sql = \"INSERT INTO ChangeLog (TableName, ActionType, EventId, UserId) VALUES (?, ?, ?, ?)\";\r\n\r\n        try (Connection conn = dbAccess.DBConnection();\r\n            PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setString(1, tableName);\r\n            stmt.setString(2, actionType);\r\n            if (eventId != null) {\r\n                stmt.setInt(3, eventId);\r\n            } else {\r\n                stmt.setNull(3, java.sql.Types.INTEGER);\r\n            }\r\n            if (userId != null) {\r\n                stmt.setInt(4, userId);\r\n            } else {\r\n                stmt.setNull(4,java.sql.Types.INTEGER);\r\n            }\r\n\r\n            stmt.executeUpdate();\r\n            System.out.println(\"Changed logged: \" + actionType + \" on \" + tableName);\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    //to view all the changes have been done\r\n    public void getAllChanges() {\r\n        String sql = \"SELECT * FROM ChangeLog ORDER BY ChangeTimestamp DESC\";\r\n\r\n        try (Connection conn = dbAccess.DBConnection();\r\n            PreparedStatement stmt = conn.prepareStatement(sql);\r\n            ResultSet rs = stmt.executeQuery()) {\r\n\r\n            System.out.println(\"=== Change History ===\");\r\n            while (rs.next()) {\r\n                int logId = rs.getInt(\"LogId\");\r\n                String tableName = rs.getString(\"TableName\");\r\n                String actionType = rs.getString(\"ActionType\");\r\n                int eventId = rs.getInt(\"EventId\");\r\n                int userId = rs.getInt(\"UserId\");\r\n                Timestamp timestamp = rs.getTimestamp(\"ChangeTimestamp\");\r\n\r\n                System.out.println(logId + \" | \" + tableName + \" | \" + actionType + \" | EventId: \" + eventId + \" | UserId: \" + userId + \" | \" + timestamp);\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dal/EventDAO.java b/src/main/java/dal/EventDAO.java
--- a/src/main/java/dal/EventDAO.java	(revision f452ca14dd08b3968742d7062f68e776de49373e)
+++ b/src/main/java/dal/EventDAO.java	(date 1744269724228)
@@ -71,35 +71,6 @@
         }
     }
 
-    public void updateEvent(Event event) {
-
-        String sql = "UPDATE Event SET Location = ?, Date = ?, StartTime = ?, EndTime = ?, Note = ?, Price = ?, Location_Guidance = ?, EventName = ? WHERE EventId = ?";
-
-        try(Connection conn = dbAccess.DBConnection();
-            PreparedStatement stmt = conn.prepareStatement(sql)) {
-
-            stmt.setString(1, event.getLocation());
-            stmt.setString(2, event.getDate());
-            stmt.setString(3, event.getStartTime());
-            stmt.setString(4, event.getEndTime());
-            stmt.setString(5, event.getNote());
-            stmt.setInt(6, event.getPrice());
-            stmt.setString(7, event.getLocation_Guidance());
-            stmt.setString(8, event.getEventName());
-            stmt.setInt(9, event.getEventId());
-
-            int rowsAffected = stmt.executeUpdate();
-            if(rowsAffected > 0) {
-                logChange("Event", "UPDATE", event.getEventId(),null);
-                System.out.println("Event updated successfully");
-            } else {
-                System.out.println("No event found");
-            }
-        } catch (SQLException e) {
-            e.printStackTrace();
-        }
-    }
-
     public void deleteEvent(String eventName){
 
         String sql = "DELETE FROM Event WHERE EventName = ?";
